<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateDatabase" xml:space="preserve">
    <value>create database [{0}];
alter database [{0}] set recovery simple;</value>
  </data>
  <data name="CreateIndexesGuid" xml:space="preserve">
    <value>create table dbo.[{0}] (
[RowId] [bigint] identity(1,1) not null constraint [PK_{0}] primary key ([RowId]),
[StructureId] [uniqueidentifier] not null,
[MemberPath] [varchar](250) not null,
[StringValue] [nvarchar](max) null,
[IntegerValue] [bigint] null,
[FractalValue] [real] null,
[DateTimeValue] [datetime] null,
[BoolValue] [bit] null,
[GuidValue] [uniqueidentifier] null);

create index [IX_{0}_StructureId] on [{0}] ([StructureId]);
create index [IX_{0}_StructureId_MemberPath] on [{0}] ([StructureId],[MemberPath]);

alter table dbo.[{0}] with nocheck add constraint FK_{0}_{1} foreign key (StructureId) references dbo.[{1}] (StructureId) on update no action on delete cascade;</value>
  </data>
  <data name="CreateIndexesIdentity" xml:space="preserve">
    <value>create table dbo.[{0}] (
[RowId] [bigint] identity(1,1) not null constraint [PK_{0}] primary key ([RowId]),
[StructureId] [bigint] not null,
[MemberPath] [varchar](250) not null,
[StringValue] [nvarchar](max) null,
[IntegerValue] [bigint] null,
[FractalValue] [real] null,
[DateTimeValue] [datetime] null,
[BoolValue] [bit] null,
[GuidValue] [uniqueidentifier] null);

create index [IX_{0}_StructureId] on [{0}] ([StructureId]);
create index [IX_{0}_StructureId_MemberPath] on [{0}] ([StructureId],[MemberPath]);

alter table dbo.[{0}] with nocheck add constraint FK_{0}_{1} foreign key (StructureId) references dbo.[{1}] (StructureId) on update no action on delete cascade;</value>
  </data>
  <data name="CreateIndexesString" xml:space="preserve">
    <value>create table dbo.[{0}] (
[RowId] [bigint] identity(1,1) not null constraint [PK_{0}] primary key ([RowId]),
[StructureId] [nvarchar](16) not null,
[MemberPath] [varchar](250) not null,
[StringValue] [nvarchar](max) null,
[IntegerValue] [bigint] null,
[FractalValue] [real] null,
[DateTimeValue] [datetime] null,
[BoolValue] [bit] null,
[GuidValue] [uniqueidentifier] null);

create index [IX_{0}_StructureId] on [{0}] ([StructureId]);
create index [IX_{0}_StructureId_MemberPath] on [{0}] ([StructureId],[MemberPath]);

alter table dbo.[{0}] with nocheck add constraint FK_{0}_{1} foreign key (StructureId) references dbo.[{1}] (StructureId) on update no action on delete cascade;</value>
  </data>
  <data name="CreateStructuresGuid" xml:space="preserve">
    <value>create table dbo.[{0}] (
[RowId] [bigint] identity(1,1) not null,
[StructureId] [uniqueidentifier] not null rowguidcol constraint [PK_{0}] primary key ([StructureId]),
[Json] [nvarchar](max) not null);

create unique index [UQ_{0}_RowId] on [{0}] ([RowId]);</value>
  </data>
  <data name="CreateStructuresIdentity" xml:space="preserve">
    <value>create table dbo.[{0}] (
[RowId] [bigint] identity(1,1) not null,
[StructureId] [bigint] not null constraint [PK_{0}] primary key ([StructureId]),
[Json] [nvarchar](max) not null);

create unique index [UQ_{0}_RowId] on [{0}] ([RowId]);

insert into dbo.[SisoDbIdentities] ([EntityHash], [EntityName]) values(@entityHash, @entityName);</value>
  </data>
  <data name="CreateStructuresString" xml:space="preserve">
    <value>create table dbo.[{0}] (
[RowId] [bigint] identity(1,1) not null,
[StructureId] [nvarchar](16) not null constraint [PK_{0}] primary key ([StructureId]),
[Json] [nvarchar](max) not null);

create unique index [UQ_{0}_RowId] on [{0}] ([RowId]);</value>
  </data>
  <data name="CreateUniquesGuid" xml:space="preserve">
    <value>create table dbo.[{0}] (
[RowId] [bigint] identity(1,1) not null constraint [PK_{0}] primary key,
[StructureId] [uniqueidentifier] not null,
[UqStructureId] [uniqueidentifier] null,
[UqMemberPath] [varchar](250) not null,
[UqValue] [nvarchar](10) not null);

create unique index [UQ_{0}] on [{0}] ([UqStructureId], [UqMemberPath], [UqValue]);

alter table dbo.[{0}] with nocheck add constraint FK_{0}_{1} foreign key (StructureId) references dbo.[{1}] (StructureId) on update no action on delete cascade;</value>
  </data>
  <data name="CreateUniquesIdentity" xml:space="preserve">
    <value>create table dbo.[{0}] (
[RowId] [bigint] identity(1,1) not null constraint [PK_{0}] primary key,
[StructureId] [bigint] not null,
[UqStructureId] [bigint] null,
[UqMemberPath] [varchar](250) not null,
[UqValue] [nvarchar](10) not null);

create unique index [UQ_{0}] on [{0}] ([UqStructureId], [UqMemberPath], [UqValue]);

alter table dbo.[{0}] with nocheck add constraint FK_{0}_{1} foreign key (StructureId) references dbo.[{1}] (StructureId) on update no action on delete cascade;</value>
  </data>
  <data name="CreateUniquesString" xml:space="preserve">
    <value>create table dbo.[{0}] (
[RowId] [bigint] identity(1,1) not null constraint [PK_{0}] primary key,
[StructureId] [nvarchar](16) not null,
[UqStructureId] [nvarchar](16) null,
[UqMemberPath] [varchar](250) not null,
[UqValue] [nvarchar](10) not null);

create unique index [UQ_{0}] on [{0}] ([UqStructureId], [UqMemberPath], [UqValue]);

alter table dbo.[{0}] with nocheck add constraint FK_{0}_{1} foreign key (StructureId) references dbo.[{1}] (StructureId) on update no action on delete cascade;</value>
  </data>
  <data name="DatabaseExists" xml:space="preserve">
    <value>select DB_ID(@dbName);</value>
  </data>
  <data name="DeleteById" xml:space="preserve">
    <value>set nocount on;
delete from [dbo].[{0}] where StructureId = @id;</value>
  </data>
  <data name="DeleteByIds" xml:space="preserve">
    <value>set nocount on;
delete from [dbo].[{0}] where StructureId in (select Id from @ids);</value>
  </data>
  <data name="DeleteByQuery" xml:space="preserve">
    <value>set nocount on;
delete from [dbo].[{0}] where StructureId in({1});</value>
  </data>
  <data name="DeleteWhereIdIsBetween" xml:space="preserve">
    <value>set nocount on;
delete from [dbo].[{0}] where StructureId &gt;= @idFrom and StructureId &lt;= @idTo;</value>
  </data>
  <data name="DropDatabase" xml:space="preserve">
    <value>if (select DB_ID('{0}')) is not null
begin
    alter database [{0}] set offline with rollback immediate;
    alter database [{0}] set online;
    drop database [{0}];
end</value>
  </data>
  <data name="DropStructureTables" xml:space="preserve">
    <value>if object_id(N'{0}', N'U') is not null drop table [dbo].[{0}];
if object_id(N'{1}', N'U') is not null drop table [dbo].[{1}];
if object_id(N'{2}', N'U') is not null drop table [dbo].[{2}];
if object_id(N'[dbo].[SisoDbIdentities]', N'U') is not null delete from [dbo].[SisoDbIdentities] where [EntityHash] = @entityHash;</value>
  </data>
  <data name="GetAllJson" xml:space="preserve">
    <value>set nocount on;
select json from [dbo].[{0}] order by [StructureId];</value>
  </data>
  <data name="GetJsonById" xml:space="preserve">
    <value>set nocount on;
select json from [dbo].[{0}] where StructureId =@id;</value>
  </data>
  <data name="GetJsonByIds" xml:space="preserve">
    <value>set nocount on;
select Json from [dbo].[{0}] where StructureId in (select Id from @ids);</value>
  </data>
  <data name="GetJsonWhereIdIsBetween" xml:space="preserve">
    <value>set nocount on;
select Json from [dbo].[{0}] where StructureId between @idFrom and @idTo;</value>
  </data>
  <data name="IndexesSchemaSynchronizer_DeleteRecordsMatchingKeyNames" xml:space="preserve">
    <value>set nocount on;
delete from [dbo].[{0}] where [{1}] in({2});</value>
  </data>
  <data name="IndexesSchemaSynchronizer_GetKeyNames" xml:space="preserve">
    <value>set nocount on;
select distinct [{0}] from [dbo].[{1}];</value>
  </data>
  <data name="Query" xml:space="preserve">
    <value>[%Start%]
select [%Take%]s.[Json][%IncludedJsonMembers%] from (select s.[StructureId][%OrderByMembers%][%IncludedRowIds%][%Paging%] from [[%MainStructureTable%]] s[%WhereAndSortingJoins%][%MatchingIncludesJoins%][%WhereCriteria%] group by s.[StructureId]) rs inner join [[%MainStructureTable%]] s on s.[StructureId] = rs.[StructureId][%IncludesJoins%][%OrderBy%]
[%End%];</value>
  </data>
  <data name="QueryReturningStructureIds" xml:space="preserve">
    <value>[%Start%]
select distinct s.[StructureId] from [[%MainStructureTable%]] s [%WhereAndSortingJoins%][%WhereCriteria%]
[%End%]</value>
  </data>
  <data name="RefreshIndexes" xml:space="preserve">
    <value>set nocount on;
ALTER INDEX [PK_{0}] ON dbo.[{0}] REBUILD;
ALTER INDEX [PK_{1}] ON dbo.[{1}] REBUILD;
ALTER INDEX [IX_{1}_StructureId] ON dbo.[{1}] REBUILD;
ALTER INDEX [IX_{1}_StructureId_MemberPath] ON dbo.[{1}] REBUILD;
ALTER INDEX [UQ_{2}] ON dbo.[{2}] REBUILD;</value>
  </data>
  <data name="RowCount" xml:space="preserve">
    <value>set nocount on;
select count(*) from [dbo].[{0}];</value>
  </data>
  <data name="RowCountByQuery" xml:space="preserve">
    <value>set nocount on;
select count(*) from [dbo].[{0}] s where s.StructureId in({1});</value>
  </data>
  <data name="Sys_Identities_CheckOutAndGetNextIdentity" xml:space="preserve">
    <value>set nocount on;
declare @id bigint;
update [dbo].[SisoDbIdentities] set @id = CurrentId + 1, CurrentId = CurrentId + @numOfIds where [EntityHash] = @entityHash;
select @id as StructureId;</value>
  </data>
  <data name="Sys_Identities_CreateIfNotExists" xml:space="preserve">
    <value>if object_id(N'[{0}].[dbo].[SisoDbIdentities]', N'U') is null
begin
	create table [{0}].[dbo].[SisoDbIdentities]
	(
		[EntityHash] [varchar](8) NOT NULL,
		[EntityName] [varchar](100) NOT NULL,
		[CurrentId] [bigint] NOT NULL default(0),
		constraint [PK_SisoDbIdentities] primary key([EntityHash])
	);
end</value>
  </data>
  <data name="Sys_Types_CreateIfNotExists" xml:space="preserve">
    <value>use [{0}];
set nocount on;
if(select 1 from sys.table_types where is_table_type = 1 and is_user_defined = 1 and name = 'SisoGuidIds') is null
begin
create type dbo.SisoGuidIds as table (Id uniqueidentifier primary key not null);	
end

if(select 1 from sys.table_types where is_table_type = 1 and is_user_defined = 1 and name = 'StructureIdentityIds') is null
begin
create type dbo.StructureIdentityIds as table (Id bigint primary key not null);	
end

if(select 1 from sys.table_types where is_table_type = 1 and is_user_defined = 1 and name = 'SisoStringIds') is null
begin
create type dbo.SisoStringIds as table (Id nvarchar(16) primary key not null);	
end</value>
  </data>
  <data name="TableExists" xml:space="preserve">
    <value>set nocount on;
select OBJECT_ID(@tableName, 'U');</value>
  </data>
  <data name="UniquesSchemaSynchronizer_DeleteRecordsMatchingKeyNames" xml:space="preserve">
    <value>set nocount on;
delete from [dbo].[{0}] where [{1}] in({2});</value>
  </data>
  <data name="UniquesSchemaSynchronizer_GetKeyNames" xml:space="preserve">
    <value>set nocount on;
select distinct [{0}] from [dbo].[{1}];</value>
  </data>
</root>